/*
 * LanceDB REST Catalog API
 *
 * REST interface for managing LanceDB databases and tables
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`v1_databases_db_name_tables_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1DatabasesDbNameTablesDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_databases_db_name_tables_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1DatabasesDbNameTablesGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_databases_db_name_tables_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1DatabasesDbNameTablesPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_databases_db_name_tables_table_name_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1DatabasesDbNameTablesTableNameDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_databases_db_name_tables_table_name_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1DatabasesDbNameTablesTableNameGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_databases_db_name_tables_table_name_name_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1DatabasesDbNameTablesTableNameNamePutError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_databases_db_name_tables_table_name_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1DatabasesDbNameTablesTableNamePutError {
    UnknownValue(serde_json::Value),
}


pub async fn v1_databases_db_name_tables_delete(configuration: &configuration::Configuration, db_name: &str) -> Result<(), Error<V1DatabasesDbNameTablesDeleteError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_db_name = db_name;

    let uri_str = format!("{}/v1/databases/{dbName}/tables", configuration.base_path, dbName=crate::apis::urlencode(p_db_name));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<V1DatabasesDbNameTablesDeleteError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn v1_databases_db_name_tables_get(configuration: &configuration::Configuration, db_name: &str, start_after: Option<&str>, limit: Option<i32>) -> Result<models::TableList, Error<V1DatabasesDbNameTablesGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_db_name = db_name;
    let p_start_after = start_after;
    let p_limit = limit;

    let uri_str = format!("{}/v1/databases/{dbName}/tables", configuration.base_path, dbName=crate::apis::urlencode(p_db_name));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_start_after {
        req_builder = req_builder.query(&[("startAfter", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TableList`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TableList`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<V1DatabasesDbNameTablesGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn v1_databases_db_name_tables_post(configuration: &configuration::Configuration, db_name: &str, create_table_request: models::CreateTableRequest) -> Result<(), Error<V1DatabasesDbNameTablesPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_db_name = db_name;
    let p_create_table_request = create_table_request;

    let uri_str = format!("{}/v1/databases/{dbName}/tables", configuration.base_path, dbName=crate::apis::urlencode(p_db_name));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_create_table_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<V1DatabasesDbNameTablesPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn v1_databases_db_name_tables_table_name_delete(configuration: &configuration::Configuration, db_name: &str, table_name: &str) -> Result<(), Error<V1DatabasesDbNameTablesTableNameDeleteError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_db_name = db_name;
    let p_table_name = table_name;

    let uri_str = format!("{}/v1/databases/{dbName}/tables/{tableName}", configuration.base_path, dbName=crate::apis::urlencode(p_db_name), tableName=crate::apis::urlencode(p_table_name));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<V1DatabasesDbNameTablesTableNameDeleteError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn v1_databases_db_name_tables_table_name_get(configuration: &configuration::Configuration, db_name: &str, table_name: &str) -> Result<models::TableMetadata, Error<V1DatabasesDbNameTablesTableNameGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_db_name = db_name;
    let p_table_name = table_name;

    let uri_str = format!("{}/v1/databases/{dbName}/tables/{tableName}", configuration.base_path, dbName=crate::apis::urlencode(p_db_name), tableName=crate::apis::urlencode(p_table_name));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TableMetadata`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TableMetadata`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<V1DatabasesDbNameTablesTableNameGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn v1_databases_db_name_tables_table_name_name_put(configuration: &configuration::Configuration, db_name: &str, table_name: &str, v1_databases_db_name_tables_table_name_name_put_request: Option<models::V1DatabasesDbNameTablesTableNameNamePutRequest>) -> Result<(), Error<V1DatabasesDbNameTablesTableNameNamePutError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_db_name = db_name;
    let p_table_name = table_name;
    let p_v1_databases_db_name_tables_table_name_name_put_request = v1_databases_db_name_tables_table_name_name_put_request;

    let uri_str = format!("{}/v1/databases/{dbName}/tables/{tableName}/name", configuration.base_path, dbName=crate::apis::urlencode(p_db_name), tableName=crate::apis::urlencode(p_table_name));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_v1_databases_db_name_tables_table_name_name_put_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<V1DatabasesDbNameTablesTableNameNamePutError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn v1_databases_db_name_tables_table_name_put(configuration: &configuration::Configuration, db_name: &str, table_name: &str, table_update: Option<models::TableUpdate>) -> Result<(), Error<V1DatabasesDbNameTablesTableNamePutError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_db_name = db_name;
    let p_table_name = table_name;
    let p_table_update = table_update;

    let uri_str = format!("{}/v1/databases/{dbName}/tables/{tableName}", configuration.base_path, dbName=crate::apis::urlencode(p_db_name), tableName=crate::apis::urlencode(p_table_name));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_table_update);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<V1DatabasesDbNameTablesTableNamePutError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

